<!--
Warning this script may be auto-focus nor auto-selecting in web browser after use.
How to Start or Stop Windows Media Player Network Sharing Service in Windows 11/10
https://www.youtube.com/watch?v=6EoIxfjVXe0
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Screen Capture API (Video-Audio Capture to .WEBM)</title>
    <style type="text/css">
*{margin:12px;}
#form{margin: auto; width: 45%; border: 3px solid #B4C424; padding: 10px; }
label{font-size:1em;}
p{font-size:1.5em;color:red; font-weight:bold;}
pre{font-size:1em;color:green;}
select{font-size:16px;}
button{margin: auto; width: 45%; border: 3px solid green; padding: 10px; font-size:1.5em; font-weight:bold; }
a:hover{cursor:pointer;}
#lModif{font-size:13px;margin: auto; width: 50%; text-align:center; color:black;}
#supportDev{margin: auto; width: 92%; border: 1px solid black; text-align:center; color:black; overflow-wrap: break-word; word-wrap: break-word; hyphens: auto; white-space: normal!important; }}
</style>
</head>
<body>
    <div id='form'>
    <label for="ext"><b>Choisissez un extention de fichier ex.:(.webm .mp4 ...)</b><br>
    <u><i>new MediaRecorder(stream, {mimeType: " "});</i></u></label><br>
    <p>Stop Recording and<u>Save</u></p><br>
    <p>Before <u>Stop Sharing</u> or your<u>Stream</u>will be lost!</p><br>
    <pre>Stop sharing to save system memory.<br><u><i>(m√©moire tampon)</i></u></pre>
<select id="ext" onchange="selection(this)">
  <option value="">Selectionner une .Extention</option>
  <option value="video/webm">video/webm</option>
  <option value="video/webm;codecs=vp9">video/webm;codecs=vp9</option>
  <option value="video/mp4">video/mp4</option>
<option value="video/mp4;codecs=avc1">video/mp4;codecs=avc1</option>
<!--
video/webm
video/webm;codecs=vp8
video/webm;codecs=vp8.0
video/webm;codecs=vp9.0
video/webm;codecs=h264
video/webm;codecs=H264
video/webm;codecs=avc1
video/webm;codecs=vp8,opus
video/WEBM;codecs=VP8,OPUS
video/webm;codecs=vp9,opus
video/webm;codecs=vp8,vp9,opus
video/webm;codecs=h264,opus
video/webm;codecs=h264,vp9,opus
video/x-matroska;codecs=avc1
-->
</select>

    <button id="recording-toggle">Start recording</button>

<br><br><center><u><a onclick="viewSource();">Code Source</a></u></center>
</div>
<div>
    <p id="supportDev"></p>
    <br><p id="lModif"></p>
</div>
<script defer>
lastModif= new Date(document.lastModified);
document.getElementById('lModif').innerHTML="document.lastModified;<br>"+lastModif;
function getSupportedMimeTypes(media, types, codecs) {
  const isSupported = MediaRecorder.isTypeSupported;
  const supported = [];
  types.forEach((type) => {
    const mimeType = `${media}/${type}`;
    codecs.forEach((codec) => [
        `${mimeType};codecs=${codec}`,
        `${mimeType};codecs=${codec.toUpperCase()}`,
        // /!\ false positive /!\
        // `${mimeType};codecs:${codec}`,
        // `${mimeType};codecs:${codec.toUpperCase()}` 
      ].forEach(variation => {
        if(isSupported(variation)) 
            supported.push(variation);
    }));
    if (isSupported(mimeType))
      supported.push(mimeType);
  });
  return supported;
};

// Usage ------------------

const videoTypes = ["webm", "ogg", "mp4", "x-matroska"];
const audioTypes = ["webm", "ogg", "mp3", "x-matroska"];
const codecs = ["should-not-be-supported","vp9", "vp9.0", "vp8", "vp8.0", "avc1", "av1", "h265", "h.265", "h264", "h.264", "opus", "pcm", "aac", "mpeg", "mp4a"];

const supportedVideos = getSupportedMimeTypes("video", videoTypes, codecs);
const supportedAudios = getSupportedMimeTypes("audio", audioTypes, codecs);

var supportedDev=document.getElementById('supportDev');
supportedDev.innerHTML+='-- Top supported Video : '+ supportedVideos[0]+
'<br>-- Top supported Audio : '+ supportedAudios[0]+
'<br><br>-- All supported Videos : '+ supportedVideos+
'<br><br>-- All supported Audios : '+ supportedAudios;

function selection(selectObject) {extVal = selectObject.value;
  switch (extVal)
{
   case "video/webm":
    ext=".webm";break;
case "video/webm;codecs=vp9":
    ext=".webm";break;
   case "video/mp4":
    ext=".mp4";break;
   case "video/mp4;codecs=avc1":
    ext=".mp4";break;
       break;
   default: 
       alert('Selectionner une .Extention');
}
}

function viewSource(){;
    var source = "<!--COPIER-COLLER\nENREGISTRER SOUS\nscreenCaptureAPI.html\n-->\n<!DOCTYPE html>\n<html lang='en'>";
    source += document.getElementsByTagName('html')[0].innerHTML;
    source += "</html>";
    source = source.replace(/</g, "&lt;").replace(/>/g, "&gt;");
    source = "<pre>"+source+"</pre>";
    sourceWindow = window.open('','Source of page','height=800,width=800,scrollbars=1,resizable=1');
    sourceWindow.document.write(source);
    sourceWindow.document.close(); 
    if(window.focus) sourceWindow.focus();
}  /* sourceWindow.focus() */

var RECORDING_ONGOING = false;
var recordingToggle = document.getElementById("recording-toggle"); // The button

recordingToggle.addEventListener("click", function(){
    RECORDING_ONGOING = !RECORDING_ONGOING; // Start / Stop recording
    if(RECORDING_ONGOING){
        recordingToggle.innerHTML = "<b>Stop Recording and Save</b>";
        recordingToggle.style.color = "green";
        startRecording(); // Start the recording
    } else {
        recordingToggle.innerHTML = "Start Recording";
        recordingToggle.style.color = "red";
        stopRecording(); // Stop screen recording
    }
});
var blob, deviceRecorder = null;
var chunks = [];

async function startRecording(){
    var stream =  await navigator.mediaDevices.getDisplayMedia({video: {mediaSource: "screen"}, audio: true})

    deviceRecorder = new MediaRecorder(stream, {mimeType: extVal});
    deviceRecorder.ondataavailable = (e) => {
        if(e.data.size > 0){
             chunks.push(e.data);
        }
    }
    deviceRecorder.onstop = () => {
        chunks = [];
    }
    deviceRecorder.start(250)
}
console.log(deviceRecorder.isTypeSupported("video/webm"));
console.log(deviceRecorder.isTypeSupported("video/mp4"));
console.log(deviceRecorder.isTypeSupported("video/mp4;codecs=avc1"));

function stopRecording(){
    var filename = window.prompt("File name:", "video"); // Ask the file name

    deviceRecorder.stop(); // Stopping the recording
    blob = new Blob(chunks, {type: extVal})
    chunks = [] // Resetting the data chunks
    var dataDownloadUrl = URL.createObjectURL(blob);

    // Downloadin it onto the user's device
    let a = document.createElement('a')
    a.href = dataDownloadUrl;
    a.download = filename+ext
    a.click()
    
    URL.revokeObjectURL(dataDownloadUrl)

}
</script>
</body>
</html>